{
    "logging": {
        "log_level": 1,
        "create_log_file": true,
        "_comment": "log_level: 0=errors only, 1=errors and progress, 2=errors, progress and debug | create_log_file: whether a log file should be created or not when running the program."
    },

    "citations_csv": {
        "directory": ".",
        "filename": "citations",
        "missing_data_string": "NA",
        "array_separator": "|",
        "concat_separator": "+",
        "lower_case_all_caps_titles": true,
        "title_case_titles": false,
        "citation-code_format": "<firstauthor.family>_<year>",
        "_comment": "directory: directory of the citation csv (path can be relative or absolute) | filename: filename of the citation csv | missing_data_string: string to use for missing data (note this should not be changed after the csv file is created without manually replacing the symbol) | array_separator: separator for arrays in the csv (note this should not be changed after the csv file is created without manually replacing the symbol) | first_last_separator: separator for first and last names in author fields (note this should not be changed after the csv file is created without manually replacing the symbol) | title_case_titles: whether to put all titles in title case | citation_code_format: format for citation codes, using fields from the csv in angle brackets. Besides <firstauthor.family> and <firstauthor.given>, all fields found in the csv can be used in the `citation-code`, specified with angle brackets. Unaccepted characters in citation codes are removed, white spaces are replaced with underscores, and since citation codes are made unique by automatically adding a suffix to the end, any that end with lower-case letters will have an underscore appended to them."
    },

    "markdown": {
        "make_md": true,
        "directory": "md/",
        "link_cited": true,
        "delete_unmatched_citations": true,
        "automate_pdf_link": {
            "doi": true,
            "isbn": true
        },
        "included_properties": [
            "title",
            "author",
            "year",
            "journal",
            "publisher",
            "url",
            "type",
            "abstract"
        ],
        "user-defined_properties": {
            "physical_copy": false,
            "processed": false,
            "tags": ["citation"]
        },
        "_comment": "directory: directory to save markdown files (path can be relative or absolute) | link_cited: whether to link a paper's md to the mds of cited papers in your citation csv, if they are present, in a `cited` property in the md | delete_unmatched_citations: whether to delete files in the markdown directory with names (citation codes) that are not cited in the citation csv | automate_pdf_link: whether to automatically add a link to the pdf of the paper in the md | included_properties: properties to include in the markdown file, must match name of attributes in csv (note when data is missing the property will be omitted entirely) | user-defined_properties: user-defined properties to include in the md with their default values. Can be used to add custom properties to the md, or to force the inclusion of properties when their respective entries have no data in the csv"
    },

    "bibliography": {
        "directory": ".",
        "filename": "citations",
        "make_hayagriva": true,
        "make_bibtex": true,
        "delete_unmatched_entries": true,
        "convert_special_symbols_bibtex": true,
        "_comment": "directory: directory to save bibliography files (path can be relative or absolute) | make_hayagriva: whether to make a Hayagriva bibliography file | make_bibtex: whether to make a BibTeX bibliography file | delete_unmatched_entries: whether to delete entries in the bibliography that are not cited in the citation csv | convert_special_symbols_bibtex: whether to convert special symbols to latex encoding in author names and titles for the bibtex citation file, e.g., changing \"Ã¼\" to \"\\\"u\". The LaTeX package `biblatex` can sidestep this issue and handles special symbols, so you may wish to turn this off (see https://tex.stackexchange.com/a/57827/262614)"
    },

    "network": {
        "timeout": 3,
        "num_retries": 3,
        "retry_delay": 2,
        "_comment": "timeout: timeout for requests in seconds | num_retries: number of retries | retry_delay: delay between retries in seconds"
    },

    "api_preference": {
        "primary_isbn": "openlibrary",
        "secondary_isbn": "googlebooks",
        "_comment": "primary_isbn: preferred api for isbn lookup | secondary_isbn: secondary api for isbn lookup if primary fails, null if no secondary api is desired"
    },

    "polite_api": {
        "project_name": null,
        "project_version": null,
        "project_url": null,
        "contact_email": null,
        "_comment": "Provide your project details if you would like to use the CrossRef polite api (slightly faster), or if you plan to make frequent use of the OpenLibrary api. See links for details: https://www.crossref.org/documentation/retrieve-metadata/rest-api/tips-for-using-the-crossref-rest-api/ and https://openlibrary.org/developers/api"
    },

    "advanced": {
        "_comment": "Advanced settings. Only change if you know what you are doing.",
        "api": {
            "crossref": {
                "url": "https://api.crossref.org/works/",
                "_example": "https://api.crossref.org/works/10.1126/science.359.6377.725",
                "_comment": "The URL for the Crossref api. Can append DOI. Not used in script, crossref.restful used instead, which returns the \"message\" property, not the whole response."
            },
            "openlibrary": {
                "url": "https://openlibrary.org/search.json?q=isbn:",
                "_example": "https://openlibrary.org/search.json?q=isbn:9780134092669",
                "_comment": "The URL for the Open Library api. Can append ISBN. Read more at https://openlibrary.org/developers/api."
            },
            "googlebooks": {
                "url": "https://www.googleapis.com/books/v1/volumes?q=isbn:",
                "_example": "https://www.googleapis.com/books/v1/volumes?q=isbn:9780134092669",
                "_comment": "The URL for the Google Books api. Can append ISBN."
            }
        },
        "file_encoding": {
            "read_encoding": "utf-8-sig",
            "write_encoding": "utf-8",
            "_comment": "read_encoding: encoding to open files with | write_encoding: encoding to save files with"
        },
        "csv_headers": {
            "info_headers": [
                "title",
                "author",
                "year",
                "month",
                "day",
                "journal",
                "abbreviated-journal",
                "publisher",
                "page",
                "volume",
                "issue",
                "doi",
                "isbn",
                "url",
                "cited-by-count",
                "type",
                "abstract",
                "cited-dois"
            ],
            "crossref": {
                "title": "title.0@",
                "author": "author.*.[family,given]@",
                "year": "published-print.date-parts.0.0|published-online.date-parts.0.0",
                "month": "published-print.date-parts.0.1|published-online.date-parts.0.1",
                "day": "published-print.date-parts.0@|published-online.date-parts.0@",
                "journal": "container-title.0",
                "abbreviated-journal": "short-container-title.0",
                "page": "page",
                "volume": "volume",
                "issue": "issue",
                "url": "resource.primary.URL",
                "cited-by-count": "is-referenced-by-count",
                "type": "type@",
                "abstract": "abstract@",
                "cited-dois": "reference.*.DOI"
            },
            "openlibrary": {
                "/": "docs.0",
                "title": "title@",
                "author": "author_name@",
                "year": "publish_date.0@|publish_year.0",
                "month": "publish_date.0@",
                "day": "publish_date.0@",
                "publisher": "publisher.0",
                "type": "type@"
            },
            "googlebooks": {
                "/": "items.0",
                "title": "volumeInfo.[title,subtitle]@",
                "author": "volumeInfo.authors@",
                "year": "volumeInfo.publishedDate@",
                "month": "volumeInfo.publishedDate@",
                "day": "volumeInfo.publishedDate@",
                "publisher": "volumeInfo.publisher",
                "url": "volumeInfo.canonicalVolumeLink",
                "type": "kind@"
            },
            "_comment": "headers for the csv file overall and by api, with addresses to find data in json response from each api. If the header is missing for the api, or data is not found in response, the property will be set to the missing_data_string in settings.json. | indicate alternate addresses to try in order, Integers in address represent the index of the array element to access, * represents creating a list of the items found at the rest of the address across an array, [] is for concatenation of multiple fields, @ is to flag for special processing by the _process_data method in the Works classes in api.py. The `/` key is used to specify the root of the json response for all other addresses to be evaluated by. If the root is not specified, the root is assumed to be the json response itself. `info_headers` are headers with data collected from the apis or edited by users. Others are added and managed by the program (specifically, those found in _GenWorks._set_citation_code of api.py)."
        }
    }
}
